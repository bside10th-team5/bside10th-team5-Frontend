import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import styled from "styled-components";

const Observer = styled.div`
  width: 5rem;
  height: 5rem;
  position: absolute;
  top: 0;
  left: 0;
`;

const Gnb = styled.header`
  position: fixed;
  top: 0;
  left: 0;
  border: 1px solid yellow;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  height: 5rem;
  background-color: green;
  transform: ${(props) => (props.theme.isVisible ? "translateY(0%)" : "translateY(-100%)")};
  transition: all 400ms ease-in-out 0s;
`;

const Wrapper = styled.div`
  width: 100vw;
  overflowx: hidden;
`;

const Section = styled.section`
  background-color: ${(props) => props.theme.backgroundColor || "white"};
  height: ${(props) => props.theme.height || "55rem"};
  display: flex;
  flex-direction: column;
  color: white;

  & > .row-box {
    box-sizing: border-box;
    border: 1px solid black;
    margin: 23px 50px 17px;
    height: 4rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  & > .center-box {
    display: flex;
    flex: 1;
    align-items: center;
    justify-content: center;
    border: 1px solid white;
  }
`;

export default function Home() {
  const target = useRef();
  const bottomTarget = useRef();
  const [gnbVisible, setGnbVisible] = useState(false);

  const observerCallback = (entries) => {
    const [entry] = entries;
    if (entry.time > 1000) {
      if (entry.isIntersecting) {
        setGnbVisible(false);
      } else if (!entry.isIntersecting) {
        setGnbVisible(true);
      }
    }
  };

  useEffect(() => {
    const option = {
      root: null,
      threshold: 0.6,
    };
    const observer = new IntersectionObserver(observerCallback, option);
    const currentTarget = bottomTarget.current;

    if (currentTarget) {
      observer.observe(currentTarget);
    }

    return () => {
      if (currentTarget) {
        observer.unobserve(currentTarget);
      }
    };
  }, [bottomTarget]);

  useEffect(() => {
    const option = {
      root: null,
      threshold: 0.1,
    };
    const observer = new IntersectionObserver(observerCallback, option);
    const currentTarget = target.current;

    if (currentTarget) {
      observer.observe(currentTarget);
    }

    return () => {
      if (currentTarget) {
        observer.unobserve(currentTarget);
      }
    };
  }, [target]);

  return (
    <>
      <Head>
        <title>what-happen | dev</title>
        <meta name="description" content="Generated by nomercybros" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <LandingPage /> */}
      <Wrapper>
        <Gnb theme={{ isVisible: gnbVisible }}>
          <div>로고</div>
          <div>내예약</div>
        </Gnb>
        <Section theme={{ backgroundColor: "orange" }}>
          <div className="row-box">
            <span>로고</span>
            <span>내예약</span>
          </div>
          <div className="center-box">영역1</div>
        </Section>
        <Section theme={{ backgroundColor: "blue" }}>
          <div className="center-box">영역2</div>
        </Section>
        <Section theme={{ backgroundColor: "purple" }}>
          <div className="center-box">영역3</div>
        </Section>
        <Section theme={{ backgroundColor: "black", height: "30rem" }}>
          <div className="center-box">영역4</div>
        </Section>
        <Observer ref={target} />
      </Wrapper>
    </>
  );
}

// const Wrapper = styled("div")`
//   width: 500px;
//   height: 500px;
//   background-color: ${({ theme }) => theme.bg.primary};
//   color: ${({ theme }) => theme.text.primary};

//   @media ${({ theme }) => theme.device.laptop} {
//     display: flex;
//     flex-direction: column;
//   }
// `;
